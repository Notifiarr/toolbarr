// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT
import {starrs} from '../models';
import {lidarr} from '../models';
import {prowlarr} from '../models';
import {radarr} from '../models';
import {readarr} from '../models';
import {sonarr} from '../models';

export function AppProfiles(arg1:starrs.AppConfig):Promise<any>;

export function BlockList(arg1:starrs.AppConfig,arg2:number,arg3:number,arg4:string,arg5:string):Promise<any>;

export function CustomFilters(arg1:starrs.AppConfig):Promise<any>;

export function DeleteBlockList(arg1:starrs.AppConfig,arg2:number):Promise<any>;

export function DeleteDownloader(arg1:starrs.AppConfig,arg2:number):Promise<any>;

export function DeleteExclusion(arg1:starrs.AppConfig,arg2:number):Promise<any>;

export function DeleteImportList(arg1:starrs.AppConfig,arg2:number):Promise<any>;

export function DeleteIndexer(arg1:starrs.AppConfig,arg2:number):Promise<any>;

export function DeleteQualityProfile(arg1:starrs.AppConfig,arg2:number):Promise<any>;

export function DeleteRootFolder(arg1:starrs.AppConfig,arg2:string):Promise<starrs.RootFolders>;

export function Downloaders(arg1:starrs.AppConfig):Promise<any>;

export function Exclusions(arg1:starrs.AppConfig):Promise<any>;

export function ExportDownloadClients(arg1:starrs.AppConfig,arg2:starrs.Selected):Promise<string>;

export function ExportExclusions(arg1:starrs.AppConfig,arg2:starrs.Selected):Promise<string>;

export function ExportImportLists(arg1:starrs.AppConfig,arg2:starrs.Selected):Promise<string>;

export function ExportIndexer(arg1:starrs.AppConfig,arg2:starrs.Selected):Promise<string>;

export function ImportDownloadClients(arg1:starrs.AppConfig):Promise<{[key: string]: any}>;

export function ImportExclusions(arg1:starrs.AppConfig):Promise<{[key: string]: any}>;

export function ImportImportLists(arg1:starrs.AppConfig):Promise<{[key: string]: any}>;

export function ImportIndexer(arg1:starrs.AppConfig):Promise<{[key: string]: any}>;

export function ImportLists(arg1:starrs.AppConfig):Promise<any>;

export function ImportSelectedDownloadClients(arg1:starrs.AppConfig,arg2:starrs.Selected):Promise<{[key: string]: any}>;

export function ImportSelectedExclusions(arg1:starrs.AppConfig,arg2:starrs.Selected):Promise<{[key: string]: any}>;

export function ImportSelectedImportLists(arg1:starrs.AppConfig,arg2:starrs.Selected):Promise<{[key: string]: any}>;

export function ImportSelectedIndexer(arg1:starrs.AppConfig,arg2:starrs.Selected):Promise<{[key: string]: any}>;

export function Indexers(arg1:starrs.AppConfig):Promise<any>;

export function MetadataProfiles(arg1:starrs.AppConfig):Promise<any>;

export function MigratorInfo(arg1:starrs.AppConfig):Promise<starrs.MigratorInfo>;

export function QualityProfiles(arg1:starrs.AppConfig):Promise<any>;

export function RootFolders(arg1:starrs.AppConfig):Promise<any>;

export function Tags(arg1:starrs.AppConfig):Promise<{[key: number]: string}>;

export function TestInstance(arg1:starrs.AppConfig):Promise<string>;

export function TestLidarrDownloadClient(arg1:starrs.AppConfig,arg2:lidarr.DownloadClientInput):Promise<string>;

export function TestLidarrImportList(arg1:starrs.AppConfig,arg2:lidarr.ImportListInput):Promise<string>;

export function TestLidarrIndexer(arg1:starrs.AppConfig,arg2:lidarr.IndexerInput):Promise<string>;

export function TestProwlarrDownloadClient(arg1:starrs.AppConfig,arg2:prowlarr.DownloadClientInput):Promise<string>;

export function TestProwlarrIndexer(arg1:starrs.AppConfig,arg2:prowlarr.IndexerInput):Promise<string>;

export function TestRadarrDownloadClient(arg1:starrs.AppConfig,arg2:radarr.DownloadClientInput):Promise<string>;

export function TestRadarrImportList(arg1:starrs.AppConfig,arg2:radarr.ImportListInput):Promise<string>;

export function TestRadarrIndexer(arg1:starrs.AppConfig,arg2:radarr.IndexerInput):Promise<string>;

export function TestReadarrDownloadClient(arg1:starrs.AppConfig,arg2:readarr.DownloadClientInput):Promise<string>;

export function TestReadarrImportList(arg1:starrs.AppConfig,arg2:readarr.ImportListInput):Promise<string>;

export function TestReadarrIndexer(arg1:starrs.AppConfig,arg2:readarr.IndexerInput):Promise<string>;

export function TestSonarrDownloadClient(arg1:starrs.AppConfig,arg2:sonarr.DownloadClientInput):Promise<string>;

export function TestSonarrImportList(arg1:starrs.AppConfig,arg2:sonarr.ImportListInput):Promise<string>;

export function TestSonarrIndexer(arg1:starrs.AppConfig,arg2:sonarr.IndexerInput):Promise<string>;

export function TestWhisparrDownloadClient(arg1:starrs.AppConfig,arg2:sonarr.DownloadClientInput):Promise<string>;

export function TestWhisparrImportList(arg1:starrs.AppConfig,arg2:sonarr.ImportListInput):Promise<string>;

export function TestWhisparrIndexer(arg1:starrs.AppConfig,arg2:sonarr.IndexerInput):Promise<string>;

export function UpdateInvalidItems(arg1:starrs.AppConfig,arg2:string,arg3:string,arg4:{[key: number]: boolean}):Promise<starrs.RootFolders>;

export function UpdateLidarrDownloadClient(arg1:starrs.AppConfig,arg2:boolean,arg3:lidarr.DownloadClientInput):Promise<starrs.DataReply>;

export function UpdateLidarrExclusion(arg1:starrs.AppConfig,arg2:lidarr.Exclusion):Promise<starrs.DataReply>;

export function UpdateLidarrImportList(arg1:starrs.AppConfig,arg2:boolean,arg3:lidarr.ImportListInput):Promise<starrs.DataReply>;

export function UpdateLidarrIndexer(arg1:starrs.AppConfig,arg2:boolean,arg3:lidarr.IndexerInput):Promise<starrs.DataReply>;

export function UpdateLidarrQualityProfile(arg1:starrs.AppConfig,arg2:lidarr.QualityProfile):Promise<starrs.DataReply>;

export function UpdateProwlarrDownloadClient(arg1:starrs.AppConfig,arg2:boolean,arg3:prowlarr.DownloadClientInput):Promise<starrs.DataReply>;

export function UpdateProwlarrIndexer(arg1:starrs.AppConfig,arg2:boolean,arg3:prowlarr.IndexerInput):Promise<starrs.DataReply>;

export function UpdateRadarrDownloadClient(arg1:starrs.AppConfig,arg2:boolean,arg3:radarr.DownloadClientInput):Promise<starrs.DataReply>;

export function UpdateRadarrExclusion(arg1:starrs.AppConfig,arg2:radarr.Exclusion):Promise<starrs.DataReply>;

export function UpdateRadarrImportList(arg1:starrs.AppConfig,arg2:boolean,arg3:radarr.ImportListInput):Promise<starrs.DataReply>;

export function UpdateRadarrIndexer(arg1:starrs.AppConfig,arg2:boolean,arg3:radarr.IndexerInput):Promise<starrs.DataReply>;

export function UpdateRadarrQualityProfile(arg1:starrs.AppConfig,arg2:radarr.QualityProfile):Promise<starrs.DataReply>;

export function UpdateReadarrDownloadClient(arg1:starrs.AppConfig,arg2:boolean,arg3:readarr.DownloadClientInput):Promise<starrs.DataReply>;

export function UpdateReadarrExclusion(arg1:starrs.AppConfig,arg2:readarr.Exclusion):Promise<starrs.DataReply>;

export function UpdateReadarrImportList(arg1:starrs.AppConfig,arg2:boolean,arg3:readarr.ImportListInput):Promise<starrs.DataReply>;

export function UpdateReadarrIndexer(arg1:starrs.AppConfig,arg2:boolean,arg3:readarr.IndexerInput):Promise<starrs.DataReply>;

export function UpdateReadarrQualityProfile(arg1:starrs.AppConfig,arg2:readarr.QualityProfile):Promise<starrs.DataReply>;

export function UpdateRecycleBin(arg1:starrs.AppConfig,arg2:string):Promise<starrs.RootFolders>;

export function UpdateRootFolder(arg1:starrs.AppConfig,arg2:string,arg3:string):Promise<starrs.RootFolders>;

export function UpdateSonarrDownloadClient(arg1:starrs.AppConfig,arg2:boolean,arg3:sonarr.DownloadClientInput):Promise<starrs.DataReply>;

export function UpdateSonarrExclusion(arg1:starrs.AppConfig,arg2:sonarr.Exclusion):Promise<starrs.DataReply>;

export function UpdateSonarrImportList(arg1:starrs.AppConfig,arg2:boolean,arg3:sonarr.ImportListInput):Promise<starrs.DataReply>;

export function UpdateSonarrIndexer(arg1:starrs.AppConfig,arg2:boolean,arg3:sonarr.IndexerInput):Promise<starrs.DataReply>;

export function UpdateSonarrQualityProfile(arg1:starrs.AppConfig,arg2:sonarr.QualityProfile):Promise<starrs.DataReply>;

export function UpdateWhisparrDownloadClient(arg1:starrs.AppConfig,arg2:boolean,arg3:sonarr.DownloadClientInput):Promise<starrs.DataReply>;

export function UpdateWhisparrExclusion(arg1:starrs.AppConfig,arg2:sonarr.Exclusion):Promise<starrs.DataReply>;

export function UpdateWhisparrImportList(arg1:starrs.AppConfig,arg2:boolean,arg3:sonarr.ImportListInput):Promise<starrs.DataReply>;

export function UpdateWhisparrIndexer(arg1:starrs.AppConfig,arg2:boolean,arg3:sonarr.IndexerInput):Promise<starrs.DataReply>;

export function UpdateWhisparrQualityProfile(arg1:starrs.AppConfig,arg2:sonarr.QualityProfile):Promise<starrs.DataReply>;
